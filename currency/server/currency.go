// need to implement CurrencyServer interface generated by protoc
package server

import (
	"context"
	"io"
	"time"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/mwazovzky/microservices-introduction/currency/data"
	protos "github.com/mwazovzky/microservices-introduction/currency/protos/currency"
)

type CurrencyServer struct {
	protos.UnimplementedCurrencyServer
	rates *data.ExchangeRates
	log   hclog.Logger
}

func NewCurrencyServer(r *data.ExchangeRates, l hclog.Logger) *CurrencyServer {
	return &CurrencyServer{rates: r, log: l}
}

func (cs *CurrencyServer) GetRate(ctx context.Context, rr *protos.RateRequest) (*protos.RateResponse, error) {
	cs.log.Info("Handle GetRate", "base", rr.GetBase(), "destination", rr.GetDestination())

	rate, err := cs.rates.GetRate(rr.GetBase().String(), rr.GetDestination().String())
	if err != nil {
		return nil, err
	}

	return &protos.RateResponse{Rate: rate}, nil
}

func (cs *CurrencyServer) SubscribeRates(src protos.Currency_SubscribeRatesServer) error {
	go func() {
		// blocking method
		for {
			rr, err := src.Recv()

			if err == io.EOF {
				cs.log.Error("Client connection closed", err)
				break
			}

			if err != nil {
				cs.log.Error("Unable to read from client", err)
				break
			}

			cs.log.Info("Handle client request", "request", rr)
		}
	}()

	for {
		err := src.Send(&protos.RateResponse{Rate: 12})
		if err != nil {
			return err
		}

		time.Sleep(5 * time.Second)
	}
}
